AWSTemplateFormatVersion: '2010-09-09'
Description: CID Data Collection Stack v3.0.3
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Deployment parameters'
        Parameters:
          - ManagementAccountID
          - RegionsInScope
          - ResourcePrefix
          - ManagementAccountRole
          - MultiAccountRoleName
          - DestinationBucket
          - DatabaseName
          - Schedule
          - CFNSourceBucket
      - Label:
          default: 'Available modules'
        Parameters:
          - IncludeBackupModule
          - IncludeBudgetsModule
          - IncludeComputeOptimizerModule
          - IncludeCostAnomalyModule
          - IncludeCostOptimizationHubModule
          - IncludeECSChargebackModule
          - IncludeInventoryCollectorModule
          - IncludeOrgDataModule
          - IncludeRDSUtilizationModule
          - IncludeRightsizingModule
          - IncludeTAModule
          - IncludeTransitGatewayModule
    ParameterLabels:
      DestinationBucket:
        default: 'Destination S3 bucket'
      ManagementAccountRole:
        default: 'Management account role'
      ManagementAccountID:
        default: 'Comma Delimited list of Account IDs for all Management Account IDs'
      MultiAccountRoleName:
        default: 'Multi Account Role Name'
      Schedule:
        default: "Schedule can be swapped to cron, for example: cron(0 8 1,15 * ? *) for 08:00 the 1st and 15th days of the month"
      RegionsInScope:
        default: "Comma Delimited list of AWS regions from which data about resources will be collected. Example: us-east-1,eu-west-1,ap-northeast-1"
      DatabaseName:
        default: "Name of the Athena database to be created to hold lambda information"
      ResourcePrefix:
        default: "Role Prefix"
      CFNSourceBucket:
        default: "DO NOT CHANGE - A bucket that contains WA-Labs CloudFormation templates. Must be always 'aws-managed-cost-intelligence-dashboards'"
      IncludeTAModule:
        default: 'Include AWS Trusted Advisor Data Collection Module'
      IncludeRightsizingModule:
        default: 'Include Rightsizing Recommendations Data Collection Module'
      IncludeCostAnomalyModule:
        default: 'Include Cost Anomalies Data Collection Module'
      IncludeInventoryCollectorModule:
        default: 'Include Inventory Collector Module'
      IncludeComputeOptimizerModule:
        default: 'Include AWS Compute Optimizer Data Collection Module'
      IncludeECSChargebackModule:
        default: 'Include ECS Chargeback Data Collection Module'
      IncludeRDSUtilizationModule:
        default: 'Include RDS Utilization Data Collection Module'
      IncludeOrgDataModule:
        default: 'Include AWS Organization Data Collection Module'
      IncludeBudgetsModule:
        default: 'Include AWS Budgets Collection Module'
      IncludeTransitGatewayModule:
        default: 'Include AWS TransitGateway Collection Module'
      IncludeBackupModule:
        default: 'Include AWS Backup Collection Module'
      IncludeCostOptimizationHubModule:
        default: 'Include CostOptimizationHub Module'

Mappings:
  RegionMap:
    # Only support regions that have QuickSight
    ap-northeast-1: {CodeBucket: aws-managed-cost-intelligence-dashboards-ap-northeast-1 }
    ap-northeast-2: {CodeBucket: aws-managed-cost-intelligence-dashboards-ap-northeast-2 }
    ap-south-1:     {CodeBucket: aws-managed-cost-intelligence-dashboards-ap-south-1 }
    ap-southeast-1: {CodeBucket: aws-managed-cost-intelligence-dashboards-ap-southeast-1 }
    ap-southeast-2: {CodeBucket: aws-managed-cost-intelligence-dashboards-ap-southeast-2 }
    ca-central-1:   {CodeBucket: aws-managed-cost-intelligence-dashboards-ca-central-1 }
    eu-central-1:   {CodeBucket: aws-managed-cost-intelligence-dashboards-eu-central-1 }
    eu-north-1:     {CodeBucket: aws-managed-cost-intelligence-dashboards-eu-north-1 }
    eu-west-1:      {CodeBucket: aws-managed-cost-intelligence-dashboards-eu-west-1 }
    eu-west-2:      {CodeBucket: aws-managed-cost-intelligence-dashboards-eu-west-2 }
    eu-west-3:      {CodeBucket: aws-managed-cost-intelligence-dashboards-eu-west-3 }
    sa-east-1:      {CodeBucket: aws-managed-cost-intelligence-dashboards-sa-east-1 }
    us-east-1:      {CodeBucket: aws-managed-cost-intelligence-dashboards-us-east-1 }
    us-east-2:      {CodeBucket: aws-managed-cost-intelligence-dashboards-us-east-2 }
    us-west-1:      {CodeBucket: aws-managed-cost-intelligence-dashboards-us-west-1 }
    us-west-2:      {CodeBucket: aws-managed-cost-intelligence-dashboards-us-west-2 }

  CodeTemplates:
    StepFunction:
      code: |
        {
          "Comment": "Orchestrate the collection of ${Module} data",
          "StartAt": "AccountCollectorInvoke",
          "States": {
            "AccountCollectorInvoke": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload": {
                  "Type": "${CollectionType}"
                },
                "FunctionName": "${AccountCollectorLambdaARN}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "AccountMap",
              "ResultPath": "$.accountLambdaOutput"
            },
            "AccountMap": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "InvokeModuleLambda",
                "States": {
                  "InvokeModuleLambda": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:${DeployRegion}:${Account}:lambda:invoke",
                    "OutputPath": "$.Payload",
                    "Parameters": {
                      "Payload": {
                        "account.$": "$.account",
                        "params": "${Params}"
                      },
                      "FunctionName": "${ModuleLambdaARN}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 6,
                        "BackoffRate": 2
                      }
                    ],
                    "End": true
                  }
                }
              },
              "ItemsPath": "$.accountLambdaOutput.Payload.accountList",
              "Next": "CrawlerStepFunctionStartExecution",
              "MaxConcurrency": 60
            },
            "CrawlerStepFunctionStartExecution": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": "arn:aws:states:${DeployRegion}:${Account}:stateMachine:${Prefix}CrawlerExecution-StateMachine",
                "Input": {
                  "crawlers": ${Crawlers}
                }
              },
              "End": true
            }
          },
          "TimeoutSeconds": 1200
        }

Parameters:
  DestinationBucket:
    Type: String
    Description: A Prefix of S3 Bucket name that will hold information. A Bucket name will be concatenated with account_id automatically (cid-data-123456123456). You can keep this parameter as is.
    AllowedPattern: (?=^.{3,36}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9\-])$)
    Default: cid-data-
  ManagementAccountRole:
    Type: String
    Description: The name of the IAM role that will be deployed in the management account which can retrieve AWS Organization data. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
    Default: Lambda-Assume-Role-Management-Account
  ManagementAccountID:
    Type: String
    AllowedPattern: ^(\d{12})(,\d{12})*$
    Description: "(Ex: 123456789,098654321,789054312) List of Payer IDs you wish to collect data for. Can just be one Accounts"
  MultiAccountRoleName:
    Type: String
    Description: The name of the IAM role that will be deployed from the management account to linked accounts as a read only role. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
    Default: "Optimization-Data-Multi-Account-Role"
  Schedule:
    Type: String
    Description: Cron job to trigger the lambda using cloudwatch event
    Default: "rate(14 days)"
  RegionsInScope:
    Type: String
    Description: "Ex: us-east-1,us-east-2,us-west-1,us-west-2,eu-central-1,eu-west-1,eu-west-2,eu-west-3  if empty, the current region will be used. You can add regions later by updating the stack."
    Default: ""
    AllowedPattern: (^(([a-z]{2}-([a-z]-?){4,10}-[1-9]{1}|[a-z]{2}-([a-z]-?){4,10}-[1-9]{1},?)+|)$)
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    AllowedPattern: ([a-z0-9_]*?$)
    Default: optimization_data
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all resources created. Note you may wish to add a dash at the end to make more readable (e.g. 'prefix-'). This parameter CANNOT BE UPDATED. Delete and re-create stack if needed an update.
    Default: "CID-DC-"
  CFNSourceBucket:
    Type: String
    Description: "DO NOT CHANGE - A bucket that contains WA-Labs CloudFormation templates. Must be always 'aws-managed-cost-intelligence-dashboards'"
    Default: "aws-managed-cost-intelligence-dashboards"
  IncludeTAModule:
    Type: String
    Description: Collects AWS Trusted Advisor recommendations data
    AllowedValues:
      - "yes"
      - "no"
  IncludeRightsizingModule:
    Type: String
    Description: "Collects AWS Cost Explorer Rightsizing Recommendations"
    AllowedValues:
      - "yes"
      - "no"
  IncludeCostAnomalyModule:
    Type: String
    Description: "Collects AWS Cost Explorer Cost Anomalies Recommendations"
    AllowedValues:
      - "yes"
      - "no"
  IncludeInventoryCollectorModule:
    Type: String
    Description: Collects data about AMIs, EBS volumes and snapshots
    AllowedValues:
      - "yes"
      - "no"
  IncludeComputeOptimizerModule:
    Type: String
    Description: Collects AWS Compute Optimizer service recommendations
    AllowedValues:
      - "yes"
      - "no"
  IncludeECSChargebackModule:
    Type: String
    Description: Collects data which shows costs associated with ECS Tasks leveraging EC2 instances within a Cluster
    AllowedValues:
      - "yes"
      - "no"
  IncludeRDSUtilizationModule:
    Type: String
    Description: Collects RDS CloudWatch metrics from your accounts
    AllowedValues:
      - "yes"
      - "no"
  IncludeOrgDataModule:
    Type: String
    Description: Collects AWS Organizations data such as account Id, account name, organization parent and specified tags
    AllowedValues:
      - "yes"
      - "no"
  IncludeBudgetsModule:
    Type: String
    Description: Collects AWS Budgets
    AllowedValues:
      - "yes"
      - "no"
  IncludeTransitGatewayModule:
    Type: String
    Description: Collects AWS TransitGateway data
    AllowedValues:
      - "yes"
      - "no"
  IncludeBackupModule:
    Type: String
    Description: Collects AWS Backup data
    AllowedValues:
      - "yes"
      - "no"
  IncludeCostOptimizationHubModule:
    Type: String
    Description: Collects CostOptimizationHub data
    AllowedValues:
      - "yes"
      - "no"

Outputs:
  S3Bucket:
    Description: Name of S3 Bucket which will store the AWS Cost Explorer Rightsizing recommendations
    Value: !Ref S3Bucket
  S3BucketARN:
    Description: ARN of S3 Bucket which will store the AWS Cost Explorer Rightsizing recommendations
    Value: !GetAtt S3Bucket.Arn
  RoleARN:
    Description: "The arn of the IAM role that deployed in the management account which can retrieve AWS Organization data"
    Value: !Sub "arn:aws:iam::${ManagementAccountID}:role/${ManagementAccountRole}"

Conditions:
  DeployTAModule: !Equals [ !Ref IncludeTAModule, "yes"]
  DeployRightsizingModule: !Equals [ !Ref IncludeRightsizingModule, "yes"]
  DeployCostAnomalyModule: !Equals [ !Ref IncludeCostAnomalyModule, "yes"]
  DeployInventoryCollectorModule: !Equals [ !Ref IncludeInventoryCollectorModule, "yes"]
  DeployComputeOptimizerModule: !Equals [ !Ref IncludeComputeOptimizerModule, "yes"]
  DeployEcsChargebackModule: !Equals [ !Ref IncludeECSChargebackModule, "yes"]
  DeployRDSUtilizationModule: !Equals [ !Ref IncludeRDSUtilizationModule, "yes"]
  DeployOrgDataModule: !Equals [ !Ref IncludeOrgDataModule, "yes"]
  DeployBudgetsModule: !Equals [ !Ref IncludeBudgetsModule, "yes"]
  DeployTransitGatewayModule: !Equals [ !Ref IncludeTransitGatewayModule, "yes"]
  DeployBackupModule: !Equals [ !Ref IncludeBackupModule, "yes"]
  DeployCostOptimizationHubModule: !Equals [ !Ref IncludeCostOptimizationHubModule, "yes"]
  DeployPricingModule: !Or
    - !Condition DeployInventoryCollectorModule
    - !Condition DeployRDSUtilizationModule
  DeployAccountCollector: !Or
    - Fn::Or:
      - !Condition DeployTAModule
      - !Condition DeployRightsizingModule
      - !Condition DeployCostAnomalyModule
      - !Condition DeployInventoryCollectorModule
      - !Condition DeployComputeOptimizerModule
      - !Condition DeployEcsChargebackModule
      - !Condition DeployRDSUtilizationModule
      - !Condition DeployOrgDataModule
      - !Condition DeployBudgetsModule
    - Fn::Or:
      - !Condition DeployBackupModule
      - !Condition DeployTransitGatewayModule
      - !Condition DeployCostOptimizationHubModule
  RegionsInScopeIsEmpty: !Equals
    - !Join [ '', !Split [ ' ', !Ref RegionsInScope  ] ] # remove spaces
    - ""
  ProdCFNTemplateUsed: !Equals [ !Ref CFNSourceBucket,  'aws-managed-cost-intelligence-dashboards' ]

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${DestinationBucket}${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
            BlockPublicAcls : true
            BlockPublicPolicy : true
            IgnorePublicAcls : true
            RestrictPublicBuckets : true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51 #S3 bucket should likely have a bucket policy
            reason: "No bucket policy required by default"
          - id: W35 #S3 Bucket should have access logging configured
            reason: "The bucket is used with Athena and logging can be extensive."

  S3DataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLOnly
            Action: s3:*
            Effect: Deny
            Principal: "*"
            Resource: !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: AllowTLS12Only
            Action: s3:*
            Effect: Deny
            Principal: "*"
            Resource: !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
            Condition:
              NumericLessThan:
                s3:TlsVersion: 1.2

  # GlueDatabase: # GlueDatabase can be already created by crawler in previous versions. So we cannot create it here. See Init CustomResource
  #   Type: "AWS::Glue::Database"
  #   Properties:
  #     CatalogId: !Ref AWS::AccountId
  #     DatabaseInput:
  #       Description: "CID Data Collection"
  #       Name: !Ref DatabaseName

  GlueRole:
    Type: AWS::IAM::Role
    DependsOn:
      - InitExecutor # Custom resource that creates Glue database
    Properties:
      RoleName: !Sub "${ResourcePrefix}Glue-Crawler"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: S3Read
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                 - !Sub "arn:${AWS::Partition}:s3:::${DestinationBucket}${AWS::AccountId}"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                 - !Sub "arn:${AWS::Partition}:s3:::${DestinationBucket}${AWS::AccountId}/*"
              ## Uncomment if bucket is encrypted by Custom KMS Key
              #- Effect: Allow
              #  Action:
              #    - kms:Decrypt
              #  Resource:
              #   - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/key-id"
        - PolicyName: "Glue"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:CreateTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:UpdateTable
                  - glue:GetTableVersion
                  - glue:GetTableVersions
                  - glue:DeleteTableVersion
                  - glue:CreatePartition
                  - glue:BatchCreatePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                  - glue:UpdatePartition
                  - glue:DeletePartition
                  - glue:TagResource
                Resource:
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${DatabaseName}"
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${DatabaseName}/*"
        - PolicyName: "CloudWatch"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:*:*:/aws-glue/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaAnalyticsRole: #Execution role for the custom resource for Analytics Lambda
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${ResourcePrefix}/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  LambdaAnalytics:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.10
      FunctionName: !Sub ${ResourcePrefix}analytics-Lambda
      Description: "Lambda function to collect general deployment metrics"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaAnalyticsRole.Arn
      Timeout: 15
      Environment:
        Variables:
          CID_ANALYTICS_ENDPOINT: https://cid.workshops.aws.dev/adoption-tracking
      Code:
        ZipFile: |
          import os
          import json
          import uuid
          import urllib3
          import boto3

          endpoint = os.environ['CID_ANALYTICS_ENDPOINT']
          account_id = boto3.client("sts").get_caller_identity()["Account"]

          def lambda_handler(event, context):  #pylint: disable=unused-argument
              print(json.dumps(event))
              try:
                  if event['RequestType'].upper() not in ['CREATE', 'UPDATE', 'DELETE']:
                      raise Exception(f"Unknown RequestType {event['RequestType']}") #pylint: disable=broad-exception-raised
                  action = event['RequestType'].upper()
                  name = event['ResourceProperties']['Name']
                  method = {'CREATE':'PUT', 'UPDATE': 'PATCH', 'DELETE': 'DELETE'}.get(action)
                  via_key = {'CREATE':'created_via', 'UPDATE': 'updated_via', 'DELETE': 'deleted_via'}.get(action)
                  payload = {'id': 'data-collection-lab/' + name, 'account_id': account_id, via_key: 'CFN'}
                  r =  urllib3.PoolManager().request(method, endpoint, body=json.dumps(payload).encode('utf-8'), headers={'Content-Type': 'application/json'})
                  if r.status != 200:
                      raise Exception(f"There has been an issue logging action, server did not respond with a 200 response, actual status: {r.status}, response data {r.data.decode('utf-8')}. This issue will be ignored") #pylint: disable=broad-exception-raised
                  res, reason = 'SUCCESS', 'success'
              except Exception as exc: #pylint: disable=broad-exception-caught
                  res, reason = 'SUCCESS', f"{exc} . This issue will be ignored"
              body = {
                  'Status': res,
                  'Reason': reason,
                  'PhysicalResourceId': event.get('PhysicalResourceId', str(uuid.uuid1())),
                  'StackId': event.get('StackId'),
                  'RequestId': event.get('RequestId'),
                  'LogicalResourceId': event.get('LogicalResourceId'),
                  'NoEcho': False,
                  'Data':  {'Reason': reason},
              }
              json_body=json.dumps(body)
              print(json_body)
              url = event.get('ResponseURL')
              if not url:
                  return
              try:
                  response = urllib3.PoolManager().request('PUT', url, body=json_body, headers={'content-type' : '', 'content-length' : str(len(json_body))}, retries=False)
                  print(f"Status code: {response}")
              except Exception as exc: #pylint: disable=broad-exception-caught
                  print("Failed sending PUT to CFN: " + str(exc))

  LambdaInitRole: #Execution role for the custom resource for Init Lambda
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Sub: /${ResourcePrefix}/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "Glue"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:CreateDatabase
                  - glue:DeleteDatabase
                  - glue:GetTable
                  - glue:GetTables
                  - glue:CreateTable
                  - glue:DeleteTable
                  - glue:TagResource
                Resource:
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${DatabaseName}"
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${DatabaseName}/*"
  LambdaInit:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.10
      FunctionName: !Sub ${ResourcePrefix}init-Lambda
      Description: "Lambda function to initialize the stack"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaInitRole.Arn
      Timeout: 300
      Environment:
        Variables:
          DATABASE_NAME: !Ref DatabaseName
          RESOURCE_PREFIX: !Ref ResourcePrefix
          BUCKET_NAME: !Sub "${DestinationBucket}${AWS::AccountId}"
      Code:
        ZipFile: |
          import os
          import json
          import uuid
          import urllib3
          import boto3

          database_name = os.environ['DATABASE_NAME']
          resource_prefix = os.environ['RESOURCE_PREFIX']

          def lambda_handler(event, context): #pylint: disable=unused-argument
              print(json.dumps(event))
              try:
                  action = event.get('RequestType').upper()
                  if action not in ['CREATE', 'UPDATE', 'DELETE']:
                      raise Exception(f"Unknown RequestType {action}") #pylint: disable=broad-exception-raised
                  func = {'CREATE': create, 'DELETE': delete, 'UPDATE': update}.get(action)
                  res, reason = func()
              except Exception as exc: #pylint: disable=broad-exception-caught
                  if 'Insufficient Lake Formation permission' in str(exc):
                      res, reason = 'FAILED', 'Lake Formation is not supported yet. Please use account without Lake Formation.'
                  else:
                      res, reason = 'FAILED', str(exc)
              body = {
                  'Status': res,
                  'Reason': reason,
                  'PhysicalResourceId': event.get('PhysicalResourceId', str(uuid.uuid1())),
                  'StackId': event.get('StackId'),
                  'RequestId': event.get('RequestId'),
                  'LogicalResourceId': event.get('LogicalResourceId'),
                  'NoEcho': False,
                  'Data':  {'Reason': reason},
              }
              json_body=json.dumps(body)
              print(json_body)
              url = event.get('ResponseURL')
              if not url:
                  return
              try:
                  response = urllib3.PoolManager().request('PUT', url, body=json_body, headers={'content-type' : '', 'content-length' : str(len(json_body))}, retries=False)
                  print(f"Status code: {response}")
              except Exception as exc: #pylint: disable=broad-exception-caught
                  print("Failed sending PUT to CFN: " + str(exc))

          def create():
              create_glue_table()
              return  'SUCCESS', 'success'

          def update():
              return  'SUCCESS', 'nothing to do'

          def delete():
              return  'SUCCESS', 'nothing to do'

          def create_glue_table():
              glue_client = boto3.client('glue')
              try:
                  glue_client.get_database(Name=database_name)
              except glue_client.exceptions.EntityNotFoundException:
                  glue_client.create_database(DatabaseInput={'Name': database_name})
                  print(f"Created database '{database_name}'")
              else:
                  # Delete all tables updated by previous versions of crawlers.
                  # If not crawler will not be able to update the table and will create a new one with a random name.
                  for table in glue_client.get_paginator('get_tables').paginate(DatabaseName=database_name).search('TableList'):
                      table_name = table.get('Name')
                      updated_by = table.get('Parameters', {}).get('UPDATED_BY_CRAWLER', '')
                      if not updated_by.startswith(resource_prefix):
                          glue_client.delete_table(DatabaseName=database_name, Name=table_name)
                          print(f'table {table_name} was deleted to avoid crawler confusion')
              return 'SUCCESS', 'success'

  InitExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !GetAtt LambdaInit.Arn

  CrawlerExecutionStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${ResourcePrefix}CrawlerExecution-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: |
        {
          "Comment": "Orchestrate the Glue Crawlers for the collected data",
          "StartAt": "CrawlerMap",
          "States": {
            "CrawlerMap": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "GetCrawler",
                "States": {
                  "GetCrawler": {
                    "Type": "Task",
                    "Parameters": {
                      "Name.$": "$"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:glue:getCrawler",
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "BackoffRate": 2,
                        "IntervalSeconds": 1,
                        "MaxAttempts": 8,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "Next": "IsRunning?",
                    "OutputPath": "$.Crawler"
                  },
                  "IsRunning?": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Or": [
                          {
                            "Variable": "$.State",
                            "StringEquals": "RUNNING"
                          },
                          {
                            "Variable": "$.State",
                            "StringEquals": "STOPPING"
                          }
                        ],
                        "Next": "WaitForCrawler"
                      }
                    ],
                    "Default": "StartCrawler",
                    "OutputPath": "$"
                  },
                  "WaitForCrawler": {
                    "Type": "Wait",
                    "Seconds": 30,
                    "Next": "GetCrawler",
                    "OutputPath": "$.Name",
                    "InputPath": "$"
                  },
                  "StartCrawler": {
                    "Type": "Task",
                    "Parameters": {
                      "Name.$": "$"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
                    "End": true,
                    "InputPath": "$.Name",
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "States.ALL"
                        ],
                        "BackoffRate": 2,
                        "IntervalSeconds": 1,
                        "MaxAttempts": 8,
                        "JitterStrategy": "FULL"
                      }
                    ]
                  }
                }
              },
              "ItemsPath": "$.crawlers",
              "End": true
            }
          },
          "TimeoutSeconds": 1200
        }

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${ResourcePrefix}StepFunctionExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "GlueExecution"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                  - glue:GetCrawler
                Resource: !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/${ResourcePrefix}*Crawler'
        - PolicyName: InvokeCollectionLambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourcePrefix}*Lambda*'
        - PolicyName: PolicyForSyncronousExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:DescribeRule
                  - events:PutRule
                Resource:
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule'
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}CrawlerExecution-StateMachine'
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}*detail-StateMachine'
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:StopExecution
                Resource:
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:*:*'
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:express:*:*:*'
        - PolicyName: "S3-ReadOnlyAccess" #Used for getting summary record list for map iterations to retrieve detail API calls
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: !Sub '${S3Bucket.Arn}/*'


  StepFunctionExecutionRoleInvokeAccountCollectorPolicy:
    Type: 'AWS::IAM::Policy'
    Condition: DeployAccountCollector
    Properties:
      PolicyName: InvokeAccountCollector
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
      Roles:
        - Ref: StepFunctionExecutionRole

  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${ResourcePrefix}SchedulerExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "ExecuteStateMachine"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}*StateMachine"
        - PolicyName: "ExecuteLambda"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourcePrefix}*"

  TrustedAdvisorModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployTAModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-trusted-advisor.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        GlueRoleARN: !GetAtt GlueRole.Arn
        MultiAccountRoleName: !Sub "${ResourcePrefix}${MultiAccountRoleName}"
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn

  RightsizeModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployRightsizingModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-cost-explorer-rightsizing.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        ManagementRoleName: !Sub "${ResourcePrefix}${ManagementAccountRole}"
        GlueRoleARN: !GetAtt GlueRole.Arn
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn

  CostOptimizationHubModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployCostOptimizationHubModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-cost-optimization-hub.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        ManagementRoleName: !Sub "${ResourcePrefix}${ManagementAccountRole}"
        GlueRoleARN: !GetAtt GlueRole.Arn
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn

  CostAnomalyModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployCostAnomalyModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-cost-anomaly.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        ManagementRoleName: !Sub "${ResourcePrefix}${ManagementAccountRole}"
        GlueRoleARN: !GetAtt GlueRole.Arn
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn

  BackupModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployBackupModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-backup.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        ManagementRoleName: !Sub "${ResourcePrefix}${ManagementAccountRole}"
        GlueRoleARN: !GetAtt GlueRole.Arn
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn

  InventoryCollectorModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployInventoryCollectorModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-inventory.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        GlueRoleARN: !GetAtt GlueRole.Arn
        MultiAccountRoleName: !Sub "${ResourcePrefix}${MultiAccountRoleName}"
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn
        RegionsInScope:
          Fn::If:
            - RegionsInScopeIsEmpty
            - !Sub "${AWS::Region}"
            - !Join [ '', !Split [ ' ', !Ref RegionsInScope  ] ] # remove spaces

  PricingModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployPricingModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-pricing.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        GlueRoleARN: !GetAtt GlueRole.Arn
        CodeBucket: !If [ ProdCFNTemplateUsed, !FindInMap [RegionMap, !Ref "AWS::Region", CodeBucket], !Ref CFNSourceBucket ]
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn
        RegionsInScope:
          Fn::If:
            - RegionsInScopeIsEmpty
            - !Sub "${AWS::Region}"
            - !Join [ '', !Split [ ' ', !Ref RegionsInScope  ] ] # remove spaces

  ComputeOptimizerModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployComputeOptimizerModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-compute-optimizer.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        ManagementRoleName: !Sub "${ResourcePrefix}${ManagementAccountRole}"
        ManagementAccountID: !Ref ManagementAccountID
        Schedule: !Ref Schedule
        ResourcePrefix: !Ref ResourcePrefix
        BucketPrefix:  !Ref DestinationBucket
        RegionsInScope:
          Fn::If:
            - RegionsInScopeIsEmpty
            - !Sub "${AWS::Region}"
            - !Join [ '', !Split [ ' ', !Ref RegionsInScope  ] ] # remove spaces
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn

  EcsChargebackModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployEcsChargebackModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-ecs-chargeback.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        GlueRoleARN: !GetAtt GlueRole.Arn
        MultiAccountRoleName: !Sub "${ResourcePrefix}${MultiAccountRoleName}"
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn
        RegionsInScope:
          Fn::If:
            - RegionsInScopeIsEmpty
            - !Sub "${AWS::Region}"
            - !Join [ '', !Split [ ' ', !Ref RegionsInScope  ] ] # remove spaces

  RDSUsageModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployRDSUtilizationModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-rds-usage.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        GlueRoleARN: !GetAtt GlueRole.Arn
        MultiAccountRoleName: !Sub "${ResourcePrefix}${MultiAccountRoleName}"
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn
        RegionsInScope:
          Fn::If:
            - RegionsInScopeIsEmpty
            - !Sub "${AWS::Region}"
            - !Join [ '', !Split [ ' ', !Ref RegionsInScope  ] ] # remove spaces

  OrgDataModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployOrgDataModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-organization.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        GlueRoleARN: !GetAtt GlueRole.Arn
        Schedule: !Ref Schedule
        ManagementRoleName: !Sub "${ResourcePrefix}${ManagementAccountRole}"
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn

  BudgetsModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployBudgetsModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-budgets.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        GlueRoleARN: !GetAtt GlueRole.Arn
        MultiAccountRoleName: !Sub "${ResourcePrefix}${MultiAccountRoleName}"
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn

  TransitGatewayModule:
    Type: AWS::CloudFormation::Stack
    Condition: DeployTransitGatewayModule
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/module-transit-gateway.yaml"
      Parameters:
        DestinationBucket: !Ref S3Bucket
        DestinationBucketARN: !GetAtt S3Bucket.Arn
        GlueRoleARN: !GetAtt GlueRole.Arn
        MultiAccountRoleName: !Sub "${ResourcePrefix}${MultiAccountRoleName}"
        ResourcePrefix: !Ref ResourcePrefix
        LambdaAnalyticsARN: !GetAtt LambdaAnalytics.Arn
        AccountCollectorLambdaARN: !Sub "${AccountCollector.Outputs.LambdaFunctionARN}"
        StepFunctionTemplate: !FindInMap [CodeTemplates, StepFunction, code]
        StepFunctionExecutionRoleARN: !GetAtt StepFunctionExecutionRole.Arn
        SchedulerExecutionRoleARN: !GetAtt SchedulerExecutionRole.Arn
        RegionsInScope:
          Fn::If:
            - RegionsInScopeIsEmpty
            - !Sub "${AWS::Region}"
            - !Join [ '', !Split [ ' ', !Ref RegionsInScope  ] ] # remove spaces

  AccountCollector:
    Type: AWS::CloudFormation::Stack
    Condition: DeployAccountCollector
    Properties:
      TemplateURL: !Sub "https://${CFNSourceBucket}.s3.amazonaws.com/cfn/data-collection/account-collector.yaml"
      Parameters:
        ManagementRoleName: !Sub "${ResourcePrefix}${ManagementAccountRole}"
        ManagementAccountID: !Ref ManagementAccountID
        ResourcePrefix: !Ref ResourcePrefix
